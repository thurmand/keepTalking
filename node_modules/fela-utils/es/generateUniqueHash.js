var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import hash from 'string-hash';

var collisionBuffer = {};

export default function generateUniqueHash(reference) {
  var result = (typeof reference === 'undefined' ? 'undefined' : _typeof(reference)) === 'object' ? JSON.stringify(reference) : reference;
  var prevResult = void 0;

  do {
    prevResult = result;
    result = hash(prevResult).toString(36);
  } while (collisionBuffer[result] && collisionBuffer[result] !== prevResult);

  collisionBuffer[result] = prevResult;

  return '_' + result;
}