var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { THEME_CHANNEL } from './themeChannel';

export default function FelaThemeFactory(BaseComponent, contextTypes) {
  var FelaTheme = function (_BaseComponent) {
    _inherits(FelaTheme, _BaseComponent);

    function FelaTheme(props, context) {
      _classCallCheck(this, FelaTheme);

      var _this = _possibleConstructorReturn(this, (FelaTheme.__proto__ || Object.getPrototypeOf(FelaTheme)).call(this, props, context));

      _this.state = {
        theme: context[THEME_CHANNEL] ? context[THEME_CHANNEL].get() : {}
      };
      return _this;
    }

    _createClass(FelaTheme, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var _this2 = this;

        if (this.context[THEME_CHANNEL]) {
          this.unsubscribe = this.context[THEME_CHANNEL].subscribe(function (properties) {
            return _this2.setState({
              theme: properties
            });
          });
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.unsubscribe) {
          this.unsubscribe();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return this.props.render(this.state.theme);
      }
    }]);

    return FelaTheme;
  }(BaseComponent);

  if (contextTypes) {
    FelaTheme.contextTypes = contextTypes;
  }

  return FelaTheme;
}